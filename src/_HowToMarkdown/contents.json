{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "dir",
      "name": "Back",
      "children": [
        {
          "type": "file",
          "value": "Back/Classic.md"
        },
        {
          "type": "file",
          "value": "Back/Framework.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "Form",
      "children": [
        {
          "type": "file",
          "value": "Form/Form.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "Intale.md"
    },
    {
      "type": "file",
      "value": "Pearl.md"
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "![alt text](https://asset.naker.io/image/main/logo.png)\r\n\r\n# Welcome to Naker Documentation\r\n#### Go through the handle bar on the left and find out what you can do using Naker API  \r\n#### Here you will first see what you need to know in order to make our apis works on your website and a lot of Examples + Usecases.\r\n#### If you need to go further and check how all of our classes work, go check our api documentation [Here](./api/index.html)  \r\n",
      "html": "<p><img src=\"https://asset.naker.io/image/main/logo.png\" alt=\"alt text\"></p>\n<h1 id=\"welcome-to-naker-documentation\">Welcome to Naker Documentation <a class=\"heading-anchor-permalink\" href=\"#welcome-to-naker-documentation\">#</a></h1>\n<h4 id=\"go-through-the-handle-bar-on-the-left-and-find-out-what-you-can-do-using-naker-api\">Go through the handle bar on the left and find out what you can do using Naker API <a class=\"heading-anchor-permalink\" href=\"#go-through-the-handle-bar-on-the-left-and-find-out-what-you-can-do-using-naker-api\">#</a></h4>\n<h4 id=\"here-you-will-first-see-what-you-need-to-know-in-order-to-make-our-apis-works-on-your-website-and-a-lot-of-examples-%2B-usecases.\">Here you will first see what you need to know in order to make our apis works on your website and a lot of Examples + Usecases. <a class=\"heading-anchor-permalink\" href=\"#here-you-will-first-see-what-you-need-to-know-in-order-to-make-our-apis-works-on-your-website-and-a-lot-of-examples-%2B-usecases.\">#</a></h4>\n<h4 id=\"if-you-need-to-go-further-and-check-how-all-of-our-classes-work%2C-go-check-our-api-documentation-here\">If you need to go further and check how all of our classes work, go check our api documentation <a href=\"./api/index.html\">Here</a> <a class=\"heading-anchor-permalink\" href=\"#if-you-need-to-go-further-and-check-how-all-of-our-classes-work%2C-go-check-our-api-documentation-here\">#</a></h4>\n",
      "id": 0
    },
    {
      "path": "Back/Classic.md",
      "url": "Back/Classic.html",
      "content": "# Naker Back Viewer\r\n#### A standalone library to add 3D backgrounds on your website\r\n\r\n## Getting Started\r\n\r\nImport the Javascript Back Viewer in the header of your website :\r\n\r\n```html\r\n<script data-who='ðŸ’Ž Made with naker.io ðŸ’Ž' src='https://d23jutsnau9x47.cloudfront.net/back/v1.0.2/viewer.js' ></script>\r\n```\r\n\r\nThis line will import the `nakerback` global variable to your website.\r\n\r\n## Usage\r\n\r\nYou then need to choose the html element which will be used to draw the background. You can just select this node by its `id` like this :\r\n```javascript\r\nvar container = document.getElementById('container');\r\n```\r\n\r\nUse the render function of the viewer and your background options in order to automatically create your 3D illustration like so :\r\n\r\n```javascript\r\nnakerback.render({\r\n  container: document.getElementById('container'),\r\n});\r\n```\r\n\r\n## Options\r\nYou must also add some options to the render function.\r\nType rgbArray:[r, g, b] and Vector3:{x:_number_, y:_number_, z:_number_}\r\n\r\n### Particle\r\n\r\n| Name           | Type            | Description                                    |\r\n| :------------- | :----------:    | -----------------------------------------------|\r\n| texture        | _string_        | The texture of particles                       |\r\n| number         | _number_        | The number of particle to draw                 |\r\n| colorStart     | _rgbArray_      | Color of particle when it appears              |\r\n| colorEnd       | _rgbArray_      | Color of particle when it desappears           |\r\n| sizeStart      | _number_        | Size of particle when it appears               |\r\n| sizeEnd        | _number_        | Size of particle when it desappears            |\r\n| life           | _number_        | Size of particle when it desappears            |\r\n| direction1     | _Vector3_       | Direction of the particle when it appears      |\r\n| direction2     | _Vector3_       | Second direction of the particle when it appears |\r\n\r\n### Environment\r\n\r\n| Name           | Type            | Description                                    |\r\n| :------------- | :----------:    | -----------------------------------------------|\r\n| sensitivity    | _number_        | Sensitivity of the camera when the mouse move  |\r\n| colorStart     | _rgbArray_      | Color of the top background                    |\r\n| colorEnd       | _rgbArray_      | Color of the top background                    |\r\n| gradient       | 'horizontal', 'vertical' or 'radial' | The way the gradient is drawn   |\r\n\r\n### Result\r\nAt the end your render function will work like this:\r\n```javascript\r\nnakerback.render({\r\n    container: document.getElementById('container'),\r\n    particle:{\r\n        direction1:{x:0,y:0,z:0},\r\n        direction2:{x:0,y:0,z:0},\r\n        life:0,\r\n        texture:\"https://d2uret4ukwmuoe.cloudfront.net/particle/sparks.png\",\r\n        number:819,\r\n        colorStart:[255,255,255,1],\r\n        colorEnd:[255,255,255,1],\r\n        sizeStart:0.18,\r\n        sizeEnd:0.36,\r\n        delay:0\r\n    },\r\n    environment:{\r\n        sensitivity:0.96,\r\n        colorStart:[0,0,0,1],\r\n        colorEnd:[234,0,255,1],\r\n        gradient: 'vertical'\r\n    }\r\n});\r\n```\r\n\r\nNote that the container object will need to have a position style defined, as we use absolute position of the canvas which draw the back, without a position on the container the canvas could go outside.\r\n\r\nPlus if you need specific options, we are open to it. Send us an email to support@naker.io\r\n\r\n## Examples\r\n\r\nTo see it in action, follow this link:  \r\n[Back viewer](https://codepen.io/pichou/pen/QegLbG)  \r\n",
      "html": "<h1 id=\"naker-back-viewer\">Naker Back Viewer <a class=\"heading-anchor-permalink\" href=\"#naker-back-viewer\">#</a></h1>\n<h4 id=\"a-standalone-library-to-add-3d-backgrounds-on-your-website\">A standalone library to add 3D backgrounds on your website <a class=\"heading-anchor-permalink\" href=\"#a-standalone-library-to-add-3d-backgrounds-on-your-website\">#</a></h4>\n<h2 id=\"getting-started\">Getting Started <a class=\"heading-anchor-permalink\" href=\"#getting-started\">#</a></h2>\n<p>Import the Javascript Back Viewer in the header of your website :</p>\n<pre><code class=\"language-html\">&lt;script data-who='ðŸ’Ž Made with naker.io ðŸ’Ž' src='https://d23jutsnau9x47.cloudfront.net/back/v1.0.2/viewer.js' &gt;&lt;/script&gt;\n</code></pre>\n<p>This line will import the <code>nakerback</code> global variable to your website.</p>\n<h2 id=\"usage\">Usage <a class=\"heading-anchor-permalink\" href=\"#usage\">#</a></h2>\n<p>You then need to choose the html element which will be used to draw the background. You can just select this node by its <code>id</code> like this :</p>\n<pre><code class=\"language-javascript\">var container = document.getElementById('container');\n</code></pre>\n<p>Use the render function of the viewer and your background options in order to automatically create your 3D illustration like so :</p>\n<pre><code class=\"language-javascript\">nakerback.render({\n  container: document.getElementById('container'),\n});\n</code></pre>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<p>You must also add some options to the render function.\nType rgbArray:[r, g, b] and Vector3:{x:<em>number</em>, y:<em>number</em>, z:<em>number</em>}</p>\n<h3 id=\"particle\">Particle <a class=\"heading-anchor-permalink\" href=\"#particle\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:center\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">texture</td>\n<td style=\"text-align:center\"><em>string</em></td>\n<td>The texture of particles</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:center\"><em>number</em></td>\n<td>The number of particle to draw</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">colorStart</td>\n<td style=\"text-align:center\"><em>rgbArray</em></td>\n<td>Color of particle when it appears</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">colorEnd</td>\n<td style=\"text-align:center\"><em>rgbArray</em></td>\n<td>Color of particle when it desappears</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sizeStart</td>\n<td style=\"text-align:center\"><em>number</em></td>\n<td>Size of particle when it appears</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sizeEnd</td>\n<td style=\"text-align:center\"><em>number</em></td>\n<td>Size of particle when it desappears</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">life</td>\n<td style=\"text-align:center\"><em>number</em></td>\n<td>Size of particle when it desappears</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">direction1</td>\n<td style=\"text-align:center\"><em>Vector3</em></td>\n<td>Direction of the particle when it appears</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">direction2</td>\n<td style=\"text-align:center\"><em>Vector3</em></td>\n<td>Second direction of the particle when it appears</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"environment\">Environment <a class=\"heading-anchor-permalink\" href=\"#environment\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:center\">Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">sensitivity</td>\n<td style=\"text-align:center\"><em>number</em></td>\n<td>Sensitivity of the camera when the mouse move</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">colorStart</td>\n<td style=\"text-align:center\"><em>rgbArray</em></td>\n<td>Color of the top background</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">colorEnd</td>\n<td style=\"text-align:center\"><em>rgbArray</em></td>\n<td>Color of the top background</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gradient</td>\n<td style=\"text-align:center\">â€˜horizontalâ€™, â€˜verticalâ€™ or â€˜radialâ€™</td>\n<td>The way the gradient is drawn</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"result\">Result <a class=\"heading-anchor-permalink\" href=\"#result\">#</a></h3>\n<p>At the end your render function will work like this:</p>\n<pre><code class=\"language-javascript\">nakerback.render({\n    container: document.getElementById('container'),\n    particle:{\n        direction1:{x:0,y:0,z:0},\n        direction2:{x:0,y:0,z:0},\n        life:0,\n        texture:&quot;https://d2uret4ukwmuoe.cloudfront.net/particle/sparks.png&quot;,\n        number:819,\n        colorStart:[255,255,255,1],\n        colorEnd:[255,255,255,1],\n        sizeStart:0.18,\n        sizeEnd:0.36,\n        delay:0\n    },\n    environment:{\n        sensitivity:0.96,\n        colorStart:[0,0,0,1],\n        colorEnd:[234,0,255,1],\n        gradient: 'vertical'\n    }\n});\n</code></pre>\n<p>Note that the container object will need to have a position style defined, as we use absolute position of the canvas which draw the back, without a position on the container the canvas could go outside.</p>\n<p>Plus if you need specific options, we are open to it. Send us an email to <a href=\"mailto:support@naker.io\">support@naker.io</a></p>\n<h2 id=\"examples\">Examples <a class=\"heading-anchor-permalink\" href=\"#examples\">#</a></h2>\n<p>To see it in action, follow this link:<br>\n<a href=\"https://codepen.io/pichou/pen/QegLbG\">Back viewer</a></p>\n",
      "id": 1
    },
    {
      "path": "Back/Framework.md",
      "url": "Back/Framework.html",
      "content": "# Naker Back Viewer with Frameworks\r\n\r\n## Getting Started\r\n\r\nWhen using a framework we have to set the background using the Naker.Back api. \r\nFirst if you don't have access to your head tag, you will have to load nakerback script asynchronously. This is how to do it:\r\n```javascript\r\nconst script = document.createElement(\"script\");\r\nscript.src = \"https://d23jutsnau9x47.cloudfront.net/back/v1.0.2/viewer.js\";\r\nscript.async = true;\r\ndocument.body.appendChild(script);\r\n```\r\n\r\nReminder, if you do have access to your head tag you can just put in it:\r\n```javascript\r\n<script data-who='ðŸ’Ž Made with naker.io ðŸ’Ž' src='https://d23jutsnau9x47.cloudfront.net/back/v1.0.2/viewer.js' ></script>\r\n```\r\n\r\nThen using the api you must call the render function to build the back exactly as explain in the [Classic](./Back/Classic.html) documentation. \r\n\r\nYou also have to make sure the element which will contain the back is built before rendering it. Depending on the framework you can make sure of that. \r\n\r\nPlus if you want to make sure the rendering is stopped when changind page or view, you can do:\r\n```javascript\r\nlet naker = window.nakerback.render({ \r\n  // Your Options // \r\n});\r\n\r\nnaker.system.stopRender();\r\n```\r\n\r\n\r\nHere are some exemples depending on the framework you are using:\r\n\r\n### Angular \r\n\r\nPut nakerback.render in ngOnInit function:\r\n```javascript\r\n@Component({  \r\n    selector: 'my-App',  \r\n    template: '<div id=\"container\"></div>'  \r\n})  \r\n  \r\nexport class AppComponent implements OnInit  {  \r\n    ngOnInit() {\r\n        window.nakerback.render({\r\n            container: document.getElementById('container'),\r\n            particle:{\r\n                direction1:{x:0,y:0,z:0},\r\n                direction2:{x:0,y:0,z:0},\r\n                life:0,\r\n                texture:\"https://d2uret4ukwmuoe.cloudfront.net/particle/sparks.png\",\r\n                number:819,\r\n                colorStart:[255,255,255,1],\r\n                colorEnd:[255,255,255,1],\r\n                sizeStart:0.18,\r\n                sizeEnd:0.36,\r\n                delay:0\r\n            },\r\n            environment:{\r\n                sensitivity:0.96,\r\n                backgroundTop:[0,0,0,1],\r\n                backgroundBottom:[234,0,255,1]\r\n            }\r\n        });\r\n    }\r\n}  \r\n```\r\n\r\n### React \r\nPut nakerback.render in componentDidMount function:\r\n\r\n```javascript\r\nclass AppComponent extends React.Component {\r\n\r\ncomponentDidMount() {\r\n    window.nakerback.render({\r\n        container: document.getElementById('container'),\r\n        particle:{\r\n        direction1: {x:0,y:0,z:0},\r\n        direction2: {x:0,y:0,z:0},\r\n        life:5.3,\r\n        power:0.5,\r\n        texture:\"https://res.cloudinary.com/naker-io/image/upload/v1566560053/circle_02.png\",\r\n        number:0,\r\n        colorStart:[89,173,220,0.63],\r\n        colorEnd:[198,199,230,0.87],\r\n        sizeStart:2,\r\n        sizeEnd:4\r\n        },\r\n        environment: {\r\n        sensitivity:0.8,\r\n        backgroundTop:[80,233,213,0.59],\r\n        backgroundBottom:[16,106,227,0.96]\r\n        }\r\n    });\r\n  }\r\nâ€‹\r\n\r\n  render() {\r\n        return <div id=\"container\"></div>;\r\n  }\r\n}\r\n```\r\n\r\n### HyperApp \r\nPut nakerback.render in oncreate function:\r\n\r\n```javascript\r\nconst view = (state, actions) => props => (\r\n\t<div oncreate={element => { actions.createBack(element); }}></div>\r\n)\r\n  \r\nconst state = {}\r\n\r\nconst actions = {\r\n  createBack: (element) => (state, actions) => {\r\n    window.nakerback.render({\r\n      container: element,\r\n      particle: {\r\n        direction1: { x: 0, y: 0, z: 0 },\r\n        direction2: { x: 0, y: 0, z: 0 },\r\n        life: 0,\r\n        texture: \"https://d2uret4ukwmuoe.cloudfront.net/particle/sparks.png\",\r\n        number: 819,\r\n        colorStart: [255, 255, 255, 1],\r\n        colorEnd: [255, 255, 255, 1],\r\n        sizeStart: 0.18,\r\n        sizeEnd: 0.36,\r\n        delay: 0\r\n      },\r\n      environment: {\r\n        sensitivity: 0.96,\r\n        backgroundTop: [0, 0, 0, 1],\r\n        backgroundBottom: [234, 0, 255, 1]\r\n      }\r\n    });\r\n  },\r\n}\r\n```",
      "html": "<h1 id=\"naker-back-viewer-with-frameworks\">Naker Back Viewer with Frameworks <a class=\"heading-anchor-permalink\" href=\"#naker-back-viewer-with-frameworks\">#</a></h1>\n<h2 id=\"getting-started\">Getting Started <a class=\"heading-anchor-permalink\" href=\"#getting-started\">#</a></h2>\n<p>When using a framework we have to set the background using the Naker.Back api.\nFirst if you donâ€™t have access to your head tag, you will have to load nakerback script asynchronously. This is how to do it:</p>\n<pre><code class=\"language-javascript\">const script = document.createElement(&quot;script&quot;);\nscript.src = &quot;https://d23jutsnau9x47.cloudfront.net/back/v1.0.2/viewer.js&quot;;\nscript.async = true;\ndocument.body.appendChild(script);\n</code></pre>\n<p>Reminder, if you do have access to your head tag you can just put in it:</p>\n<pre><code class=\"language-javascript\">&lt;script data-who='ðŸ’Ž Made with naker.io ðŸ’Ž' src='https://d23jutsnau9x47.cloudfront.net/back/v1.0.2/viewer.js' &gt;&lt;/script&gt;\n</code></pre>\n<p>Then using the api you must call the render function to build the back exactly as explain in the <a href=\"./Back/Classic.html\">Classic</a> documentation.</p>\n<p>You also have to make sure the element which will contain the back is built before rendering it. Depending on the framework you can make sure of that.</p>\n<p>Plus if you want to make sure the rendering is stopped when changind page or view, you can do:</p>\n<pre><code class=\"language-javascript\">let naker = window.nakerback.render({ \n  // Your Options // \n});\n\nnaker.system.stopRender();\n</code></pre>\n<p>Here are some exemples depending on the framework you are using:</p>\n<h3 id=\"angular\">Angular <a class=\"heading-anchor-permalink\" href=\"#angular\">#</a></h3>\n<p>Put nakerback.render in ngOnInit function:</p>\n<pre><code class=\"language-javascript\">@Component({  \n    selector: 'my-App',  \n    template: '&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;'  \n})  \n  \nexport class AppComponent implements OnInit  {  \n    ngOnInit() {\n        window.nakerback.render({\n            container: document.getElementById('container'),\n            particle:{\n                direction1:{x:0,y:0,z:0},\n                direction2:{x:0,y:0,z:0},\n                life:0,\n                texture:&quot;https://d2uret4ukwmuoe.cloudfront.net/particle/sparks.png&quot;,\n                number:819,\n                colorStart:[255,255,255,1],\n                colorEnd:[255,255,255,1],\n                sizeStart:0.18,\n                sizeEnd:0.36,\n                delay:0\n            },\n            environment:{\n                sensitivity:0.96,\n                backgroundTop:[0,0,0,1],\n                backgroundBottom:[234,0,255,1]\n            }\n        });\n    }\n}  \n</code></pre>\n<h3 id=\"react\">React <a class=\"heading-anchor-permalink\" href=\"#react\">#</a></h3>\n<p>Put nakerback.render in componentDidMount function:</p>\n<pre><code class=\"language-javascript\">class AppComponent extends React.Component {\n\ncomponentDidMount() {\n    window.nakerback.render({\n        container: document.getElementById('container'),\n        particle:{\n        direction1: {x:0,y:0,z:0},\n        direction2: {x:0,y:0,z:0},\n        life:5.3,\n        power:0.5,\n        texture:&quot;https://res.cloudinary.com/naker-io/image/upload/v1566560053/circle_02.png&quot;,\n        number:0,\n        colorStart:[89,173,220,0.63],\n        colorEnd:[198,199,230,0.87],\n        sizeStart:2,\n        sizeEnd:4\n        },\n        environment: {\n        sensitivity:0.8,\n        backgroundTop:[80,233,213,0.59],\n        backgroundBottom:[16,106,227,0.96]\n        }\n    });\n  }\nâ€‹\n\n  render() {\n        return &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;;\n  }\n}\n</code></pre>\n<h3 id=\"hyperapp\">HyperApp <a class=\"heading-anchor-permalink\" href=\"#hyperapp\">#</a></h3>\n<p>Put nakerback.render in oncreate function:</p>\n<pre><code class=\"language-javascript\">const view = (state, actions) =&gt; props =&gt; (\n\t&lt;div oncreate={element =&gt; { actions.createBack(element); }}&gt;&lt;/div&gt;\n)\n  \nconst state = {}\n\nconst actions = {\n  createBack: (element) =&gt; (state, actions) =&gt; {\n    window.nakerback.render({\n      container: element,\n      particle: {\n        direction1: { x: 0, y: 0, z: 0 },\n        direction2: { x: 0, y: 0, z: 0 },\n        life: 0,\n        texture: &quot;https://d2uret4ukwmuoe.cloudfront.net/particle/sparks.png&quot;,\n        number: 819,\n        colorStart: [255, 255, 255, 1],\n        colorEnd: [255, 255, 255, 1],\n        sizeStart: 0.18,\n        sizeEnd: 0.36,\n        delay: 0\n      },\n      environment: {\n        sensitivity: 0.96,\n        backgroundTop: [0, 0, 0, 1],\n        backgroundBottom: [234, 0, 255, 1]\n      }\n    });\n  },\n}\n</code></pre>\n",
      "id": 2
    },
    {
      "path": "Form/Form.md",
      "url": "Form/Form.html",
      "content": "# Naker Form Use Case\r\n#### One great way to play with the Naker API is to link it with a form as you can see on the [Naker login page](https://app.naker.io/login)  \r\n\r\n## How to do that?\r\n\r\nFirst you need to follow the Intale documentation in order to create a Intale next to your form. As you can see in this documentation you can add a callback and get the Intale object which contains all your scene assets like so:\r\n\r\n```javascript\r\nnakerintale.render({\r\n  container: document.getElementById('container'),\r\n  project: 'your-project-id',\r\n}, (intale) => {\r\n  // Intale loaded, now you can play with the Intale object!\r\n});\r\n```\r\n\r\nThe Intal object contains a lot of properties as you can see in our api documentation [**Intale Class**](../api/classes/intale.html). We will focus on two things: contentsManager and navigation.\r\n\r\n## contentsManager\r\n\r\n### Physical changes\r\nThe contentsManager is the class dealing with all your object in the Intale (image, model, cube, light, etc). This is where you can get any of those content in order to play with it and especially in our link a form's input with a content change.  \r\nFirst to get a content from your Intale you can use the tag setted in our editor like that:\r\n```javascript\r\nlet myContent = contentsManager.getContentByTag('tag_of_your_content');\r\n```\r\nTo have the detail of a content you can check it in our api documentation [**Content Class**](../api/classes/content.html). This is the shared Class of all contents but you can also find every specific content detail following those links:\r\n\r\n*  [Light Content](../api/classes/lightcontent.html)\r\n*  [Model Content](../api/classes/modelcontent.html)\r\n*  [Shape Content](../api/classes/shapecontent.html)\r\n*  [Image Content](../api/classes/imagecontent.html)\r\n*  [Video Content](../api/classes/videocontent.html)\r\n*  [Heightmap Content](../api/classes/heightmapcontent.html)\r\n\r\n#### Example\r\nHere is what you could do for instance to make an Intale react to a form input:\r\n```javascript\r\nnakerintale.render({\r\n  container: document.getElementById('container'),\r\n  project: 'your-project-id',\r\n}, (intale) => {\r\n  // Get the light of the Intale\r\n  let light = intale.contentsManager.getContentByTag('light');\r\n  // Get the form input\r\n  let textinput = window.getElementById('text-input');\r\n  // When input is changed, adjust the light of the Intale\r\n  textinput.oninput = () => {\r\n    light.setIntensity(10);\r\n  }\r\n});\r\n```\r\nFollowing the documentation you will be able to play with any object in the 3D world.  \r\n\r\n### Animation\r\nTo go further, you can also choose to animate a content after a user action. As in the editor you can put animation on any content, they all shared another class which is  [**Content Move Class**](../api/classes/animationcontent.html)  \r\nAs you can see in there, the contentMove class has the playAnimation function which will launch all the animations of the content. The one animation trigger event which launch it straight forward is the **show**. But show also mean that the nimation will start once the Intale is loaded so in order to avoid that, we will first need to stop it.\r\n#### Example\r\n```javascript\r\nnakerintale.render({\r\n  container: document.getElementById('container'),\r\n  project: 'your-project-id',\r\n}, (intale) => {\r\n  // Get the light of the Intale\r\n  let animatedContent = intale.contentsManager.getContentByTag('animated-content');\r\n  animatedContent.pauseAnimation();\r\n  // Get the form button\r\n  let button = window.getElementById('button-input');\r\n  // When button is clicked, launch the animation\r\n  button.onclick = () => {\r\n    animatedContent.playAnimation();\r\n  }\r\n});\r\n```\r\n\r\nThis is how you can alter your object Intale and laucnh animation using inputs from a form.\r\n\r\n## navigation\r\nAnother great interaction you can have between a form and a Naker's Intale is with [**navigation Class**](../api/classes/navigation.html). navigation is managing the journey of the user in an Intale. That class is responsible to launch the animation to go from one point of vue to an other. And that animation can be targeted (this is what we do when you validate the login page of Naker). That way if you have specified different point of view position/rotation/postprocess, you can animate all of that in just one function call.  \r\nIn the documentation page you can see the **moveToPointofView** method. That method simply take the name of your point of view as argument and it will make the what is needed to go to a specific point of view.\r\n\r\n#### Example\r\n```javascript\r\nnakerintale.render({\r\n  container: document.getElementById('container'),\r\n  project: 'your-project-id',\r\n}, (intale) => {\r\n  // Get the form button\r\n  let button = window.getElementById('button-input');\r\n  // When button is clicked, launch the animation\r\n  button.onclick = () => {\r\n    // Insert the number of the point of view to be reached,\r\n    // 0 is for the first Intale's point of view\r\n    intale.navigation.moveToPointofView('pointofviewname');\r\n  }\r\n});\r\n```\r\n",
      "html": "<h1 id=\"naker-form-use-case\">Naker Form Use Case <a class=\"heading-anchor-permalink\" href=\"#naker-form-use-case\">#</a></h1>\n<h4 id=\"one-great-way-to-play-with-the-naker-api-is-to-link-it-with-a-form-as-you-can-see-on-the-naker-login-page\">One great way to play with the Naker API is to link it with a form as you can see on the <a href=\"https://app.naker.io/login\">Naker login page</a> <a class=\"heading-anchor-permalink\" href=\"#one-great-way-to-play-with-the-naker-api-is-to-link-it-with-a-form-as-you-can-see-on-the-naker-login-page\">#</a></h4>\n<h2 id=\"how-to-do-that%3F\">How to do that? <a class=\"heading-anchor-permalink\" href=\"#how-to-do-that%3F\">#</a></h2>\n<p>First you need to follow the Intale documentation in order to create a Intale next to your form. As you can see in this documentation you can add a callback and get the Intale object which contains all your scene assets like so:</p>\n<pre><code class=\"language-javascript\">nakerintale.render({\n  container: document.getElementById('container'),\n  project: 'your-project-id',\n}, (intale) =&gt; {\n  // Intale loaded, now you can play with the Intale object!\n});\n</code></pre>\n<p>The Intal object contains a lot of properties as you can see in our api documentation <a href=\"../api/classes/intale.html\"><strong>Intale Class</strong></a>. We will focus on two things: contentsManager and navigation.</p>\n<h2 id=\"contentsmanager\">contentsManager <a class=\"heading-anchor-permalink\" href=\"#contentsmanager\">#</a></h2>\n<h3 id=\"physical-changes\">Physical changes <a class=\"heading-anchor-permalink\" href=\"#physical-changes\">#</a></h3>\n<p>The contentsManager is the class dealing with all your object in the Intale (image, model, cube, light, etc). This is where you can get any of those content in order to play with it and especially in our link a formâ€™s input with a content change.<br>\nFirst to get a content from your Intale you can use the tag setted in our editor like that:</p>\n<pre><code class=\"language-javascript\">let myContent = contentsManager.getContentByTag('tag_of_your_content');\n</code></pre>\n<p>To have the detail of a content you can check it in our api documentation <a href=\"../api/classes/content.html\"><strong>Content Class</strong></a>. This is the shared Class of all contents but you can also find every specific content detail following those links:</p>\n<ul>\n<li><a href=\"../api/classes/lightcontent.html\">Light Content</a></li>\n<li><a href=\"../api/classes/modelcontent.html\">Model Content</a></li>\n<li><a href=\"../api/classes/shapecontent.html\">Shape Content</a></li>\n<li><a href=\"../api/classes/imagecontent.html\">Image Content</a></li>\n<li><a href=\"../api/classes/videocontent.html\">Video Content</a></li>\n<li><a href=\"../api/classes/heightmapcontent.html\">Heightmap Content</a></li>\n</ul>\n<h4 id=\"example\">Example <a class=\"heading-anchor-permalink\" href=\"#example\">#</a></h4>\n<p>Here is what you could do for instance to make an Intale react to a form input:</p>\n<pre><code class=\"language-javascript\">nakerintale.render({\n  container: document.getElementById('container'),\n  project: 'your-project-id',\n}, (intale) =&gt; {\n  // Get the light of the Intale\n  let light = intale.contentsManager.getContentByTag('light');\n  // Get the form input\n  let textinput = window.getElementById('text-input');\n  // When input is changed, adjust the light of the Intale\n  textinput.oninput = () =&gt; {\n    light.setIntensity(10);\n  }\n});\n</code></pre>\n<p>Following the documentation you will be able to play with any object in the 3D world.</p>\n<h3 id=\"animation\">Animation <a class=\"heading-anchor-permalink\" href=\"#animation\">#</a></h3>\n<p>To go further, you can also choose to animate a content after a user action. As in the editor you can put animation on any content, they all shared another class which is  <a href=\"../api/classes/animationcontent.html\"><strong>Content Move Class</strong></a><br>\nAs you can see in there, the contentMove class has the playAnimation function which will launch all the animations of the content. The one animation trigger event which launch it straight forward is the <strong>show</strong>. But show also mean that the nimation will start once the Intale is loaded so in order to avoid that, we will first need to stop it.</p>\n<h4 id=\"example-2\">Example <a class=\"heading-anchor-permalink\" href=\"#example-2\">#</a></h4>\n<pre><code class=\"language-javascript\">nakerintale.render({\n  container: document.getElementById('container'),\n  project: 'your-project-id',\n}, (intale) =&gt; {\n  // Get the light of the Intale\n  let animatedContent = intale.contentsManager.getContentByTag('animated-content');\n  animatedContent.pauseAnimation();\n  // Get the form button\n  let button = window.getElementById('button-input');\n  // When button is clicked, launch the animation\n  button.onclick = () =&gt; {\n    animatedContent.playAnimation();\n  }\n});\n</code></pre>\n<p>This is how you can alter your object Intale and laucnh animation using inputs from a form.</p>\n<h2 id=\"navigation\">navigation <a class=\"heading-anchor-permalink\" href=\"#navigation\">#</a></h2>\n<p>Another great interaction you can have between a form and a Nakerâ€™s Intale is with <a href=\"../api/classes/navigation.html\"><strong>navigation Class</strong></a>. navigation is managing the journey of the user in an Intale. That class is responsible to launch the animation to go from one point of vue to an other. And that animation can be targeted (this is what we do when you validate the login page of Naker). That way if you have specified different point of view position/rotation/postprocess, you can animate all of that in just one function call.<br>\nIn the documentation page you can see the <strong>moveToPointofView</strong> method. That method simply take the name of your point of view as argument and it will make the what is needed to go to a specific point of view.</p>\n<h4 id=\"example-3\">Example <a class=\"heading-anchor-permalink\" href=\"#example-3\">#</a></h4>\n<pre><code class=\"language-javascript\">nakerintale.render({\n  container: document.getElementById('container'),\n  project: 'your-project-id',\n}, (intale) =&gt; {\n  // Get the form button\n  let button = window.getElementById('button-input');\n  // When button is clicked, launch the animation\n  button.onclick = () =&gt; {\n    // Insert the number of the point of view to be reached,\n    // 0 is for the first Intale's point of view\n    intale.navigation.moveToPointofView('pointofviewname');\n  }\n});\n</code></pre>\n",
      "id": 3
    },
    {
      "path": "Intale.md",
      "url": "Intale.html",
      "content": "# Naker Intale Viewer\r\n#### A standalone library to easily add naker intales anywhere online\r\n\r\n## Getting Started\r\n\r\nImport the Javascript Intale Viewer in the header of your website (current last version v1.0.2) :\r\n\r\n```html\r\n<script src=\"https://harbor.naker.io/intale/v1.0.2/viewer.js\"></script>\r\n```\r\n\r\nThis line will import the `nakerintale` global variable to your website.\r\n\r\n## Usage\r\n\r\nYou then need to choose the html element which will be used to build your naker intale. You can just select this node by its `id` like this :\r\n```javascript\r\nvar container = document.getElementById('container');\r\n```\r\n\r\nUse the render function of the viewer and your `project id` in order to automatically create your scene like so :\r\n\r\n```javascript\r\nnakerintale.render({\r\n  container: document.getElementById('container'),\r\n  project: 'your-project-id',\r\n});\r\n```\r\nYou can find your `project id` from the url when you edit it.\r\n\r\n## Options\r\n\r\nYou can also add some options to the render function. Here is the list of the available once :\r\n\r\n| Name           | Type         | Default      | Description                                                          |\r\n| :------------- | :----------: | :----------: | -------------------------------------------------------------------- |\r\n| loadervisible  | _boolean_    | `true`       | Choose if text loader is visible                                      |\r\n\r\n```javascript\r\nnakerintale.render({\r\n  container: document.getElementById('container'),\r\n  project: 'your-project-id',\r\n  loadervisible: false,\r\n});\r\n```\r\n\r\nIf you need a specific option for your project, we are open to it. Juste create an issue to share your idea and discuss it.\r\n\r\n## Callback\r\n\r\nIt is possible to add a callback as a second argument of the render function, this function will be called when the intale is completly loaded. The callback returns the intale object with all its parameters :\r\n\r\n```javascript\r\nnakerintale.render({\r\n  container: document.getElementById('container'),\r\n  project: 'your-project-id',\r\n}, (intale) => {\r\n  // Intale loaded, do what you need!\r\n});\r\n```\r\n\r\nCheck the intale to see what you can do with it [**intale Class**](../api/classes/intale.html)\r\n\r\n## Examples\r\n\r\nTo see it in action, follow these links:  \r\n[Intale viewer in the body](https://codepen.io/pichou/pen/jJXpxd)  \r\n[Intale viewer in a div](https://codepen.io/pichou/pen/YgdRKq)\r\n",
      "html": "<h1 id=\"naker-intale-viewer\">Naker Intale Viewer <a class=\"heading-anchor-permalink\" href=\"#naker-intale-viewer\">#</a></h1>\n<h4 id=\"a-standalone-library-to-easily-add-naker-intales-anywhere-online\">A standalone library to easily add naker intales anywhere online <a class=\"heading-anchor-permalink\" href=\"#a-standalone-library-to-easily-add-naker-intales-anywhere-online\">#</a></h4>\n<h2 id=\"getting-started\">Getting Started <a class=\"heading-anchor-permalink\" href=\"#getting-started\">#</a></h2>\n<p>Import the Javascript Intale Viewer in the header of your website (current last version v1.0.2) :</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;https://harbor.naker.io/intale/v1.0.2/viewer.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>This line will import the <code>nakerintale</code> global variable to your website.</p>\n<h2 id=\"usage\">Usage <a class=\"heading-anchor-permalink\" href=\"#usage\">#</a></h2>\n<p>You then need to choose the html element which will be used to build your naker intale. You can just select this node by its <code>id</code> like this :</p>\n<pre><code class=\"language-javascript\">var container = document.getElementById('container');\n</code></pre>\n<p>Use the render function of the viewer and your <code>project id</code> in order to automatically create your scene like so :</p>\n<pre><code class=\"language-javascript\">nakerintale.render({\n  container: document.getElementById('container'),\n  project: 'your-project-id',\n});\n</code></pre>\n<p>You can find your <code>project id</code> from the url when you edit it.</p>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<p>You can also add some options to the render function. Here is the list of the available once :</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">loadervisible</td>\n<td style=\"text-align:center\"><em>boolean</em></td>\n<td style=\"text-align:center\"><code>true</code></td>\n<td>Choose if text loader is visible</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">nakerintale.render({\n  container: document.getElementById('container'),\n  project: 'your-project-id',\n  loadervisible: false,\n});\n</code></pre>\n<p>If you need a specific option for your project, we are open to it. Juste create an issue to share your idea and discuss it.</p>\n<h2 id=\"callback\">Callback <a class=\"heading-anchor-permalink\" href=\"#callback\">#</a></h2>\n<p>It is possible to add a callback as a second argument of the render function, this function will be called when the intale is completly loaded. The callback returns the intale object with all its parameters :</p>\n<pre><code class=\"language-javascript\">nakerintale.render({\n  container: document.getElementById('container'),\n  project: 'your-project-id',\n}, (intale) =&gt; {\n  // Intale loaded, do what you need!\n});\n</code></pre>\n<p>Check the intale to see what you can do with it <a href=\"../api/classes/intale.html\"><strong>intale Class</strong></a></p>\n<h2 id=\"examples\">Examples <a class=\"heading-anchor-permalink\" href=\"#examples\">#</a></h2>\n<p>To see it in action, follow these links:<br>\n<a href=\"https://codepen.io/pichou/pen/jJXpxd\">Intale viewer in the body</a><br>\n<a href=\"https://codepen.io/pichou/pen/YgdRKq\">Intale viewer in a div</a></p>\n",
      "id": 4
    },
    {
      "path": "Pearl.md",
      "url": "Pearl.html",
      "content": "# Naker Pearl Viewer\r\n#### A standalone library to add 3D model as illustration on your website\r\n\r\n## Getting Started\r\n\r\nImport the Javascript Pearl Viewer in the header of your website (current last version v1.0.1) :\r\n\r\n```html\r\n<script data-who='ðŸ’Ž Made with naker.io ðŸ’Ž' src='https://d23jutsnau9x47.cloudfront.net/pearl/v1.0.2/viewer.js' ></script>\r\n```\r\n\r\nThis line will import the `nakerpearl` global variable to your website.\r\n\r\n## Usage\r\n\r\nYou then need to choose the html element which will be used to draw your model. You can just select this node by its `id` like this :\r\n```javascript\r\nvar container = document.getElementById('container');\r\n```\r\n\r\nUse the render function of the viewer and your model url in order to automatically create your 3D illustration like so :\r\n\r\n```javascript\r\nnakerpearl.render({\r\n  container: document.getElementById('container'),\r\n  model: 'https://asset.naker.io/model/icosphere.gltf',\r\n});\r\n```\r\n\r\n## Options\r\n\r\nYou can also add some options to the render function. Here is the list of the available once :\r\n\r\n| Name           | Type         | Default      | Description                                                          |\r\n| :------------- | :----------: | :----------: | -------------------------------------------------------------------- |\r\n| modelFollowMouseRapidity  | _number_    | `1`       | Choose how fast the model rotates when the mouse is moving. Set it to 0 if you don't want it to rotate at all                                      |\r\n| lightFollowMouseRapidity  | _number_    | `0`       | Choose how fast the light moves when the mouse is moving. Set it to 0 if you don't want it to move at all                                      |\r\n| hdr  | _boolean_    | `false`       | Choose if the pearl should use an hdr texture in order to have a lightmap                                      |\r\n\r\n```javascript\r\nnakerpearl.render({\r\n  container: document.getElementById('container'),\r\n  model: 'https://asset.naker.io/model/icosphere.gltf',\r\n  modelFollowMouseRapidity: 1,\r\n  lightFollowMouseRapidity: 1,\r\n  hdr: true\r\n});\r\n```\r\n\r\nIf you need a specific options, we are open to it. Juste create an issue to share your idea and discuss it.\r\n\r\n## Callback\r\n\r\nIt is possible to add a callback as a second argument of the render function, this function will be called when the model is loaded. The callback returns the pearl object :\r\n\r\n```javascript\r\nnakerpearl.render({\r\n  container: document.getElementById('container'),\r\n  project: 'your-project-id',\r\n}, (pearl) => {\r\n  // model loaded, do what you need!\r\n});\r\n```\r\n\r\nCheck the pearl to see what you can do with it [**pearl Class**](../api/classes/pearl.html)\r\n\r\n## Examples\r\n\r\nTo see it in action, follow this link:  \r\n[Pearl viewer](https://codepen.io/pichou/pen/dLaaBW)  \r\n",
      "html": "<h1 id=\"naker-pearl-viewer\">Naker Pearl Viewer <a class=\"heading-anchor-permalink\" href=\"#naker-pearl-viewer\">#</a></h1>\n<h4 id=\"a-standalone-library-to-add-3d-model-as-illustration-on-your-website\">A standalone library to add 3D model as illustration on your website <a class=\"heading-anchor-permalink\" href=\"#a-standalone-library-to-add-3d-model-as-illustration-on-your-website\">#</a></h4>\n<h2 id=\"getting-started\">Getting Started <a class=\"heading-anchor-permalink\" href=\"#getting-started\">#</a></h2>\n<p>Import the Javascript Pearl Viewer in the header of your website (current last version v1.0.1) :</p>\n<pre><code class=\"language-html\">&lt;script data-who='ðŸ’Ž Made with naker.io ðŸ’Ž' src='https://d23jutsnau9x47.cloudfront.net/pearl/v1.0.2/viewer.js' &gt;&lt;/script&gt;\n</code></pre>\n<p>This line will import the <code>nakerpearl</code> global variable to your website.</p>\n<h2 id=\"usage\">Usage <a class=\"heading-anchor-permalink\" href=\"#usage\">#</a></h2>\n<p>You then need to choose the html element which will be used to draw your model. You can just select this node by its <code>id</code> like this :</p>\n<pre><code class=\"language-javascript\">var container = document.getElementById('container');\n</code></pre>\n<p>Use the render function of the viewer and your model url in order to automatically create your 3D illustration like so :</p>\n<pre><code class=\"language-javascript\">nakerpearl.render({\n  container: document.getElementById('container'),\n  model: 'https://asset.naker.io/model/icosphere.gltf',\n});\n</code></pre>\n<h2 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h2>\n<p>You can also add some options to the render function. Here is the list of the available once :</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">modelFollowMouseRapidity</td>\n<td style=\"text-align:center\"><em>number</em></td>\n<td style=\"text-align:center\"><code>1</code></td>\n<td>Choose how fast the model rotates when the mouse is moving. Set it to 0 if you donâ€™t want it to rotate at all</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lightFollowMouseRapidity</td>\n<td style=\"text-align:center\"><em>number</em></td>\n<td style=\"text-align:center\"><code>0</code></td>\n<td>Choose how fast the light moves when the mouse is moving. Set it to 0 if you donâ€™t want it to move at all</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hdr</td>\n<td style=\"text-align:center\"><em>boolean</em></td>\n<td style=\"text-align:center\"><code>false</code></td>\n<td>Choose if the pearl should use an hdr texture in order to have a lightmap</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-javascript\">nakerpearl.render({\n  container: document.getElementById('container'),\n  model: 'https://asset.naker.io/model/icosphere.gltf',\n  modelFollowMouseRapidity: 1,\n  lightFollowMouseRapidity: 1,\n  hdr: true\n});\n</code></pre>\n<p>If you need a specific options, we are open to it. Juste create an issue to share your idea and discuss it.</p>\n<h2 id=\"callback\">Callback <a class=\"heading-anchor-permalink\" href=\"#callback\">#</a></h2>\n<p>It is possible to add a callback as a second argument of the render function, this function will be called when the model is loaded. The callback returns the pearl object :</p>\n<pre><code class=\"language-javascript\">nakerpearl.render({\n  container: document.getElementById('container'),\n  project: 'your-project-id',\n}, (pearl) =&gt; {\n  // model loaded, do what you need!\n});\n</code></pre>\n<p>Check the pearl to see what you can do with it <a href=\"../api/classes/pearl.html\"><strong>pearl Class</strong></a></p>\n<h2 id=\"examples\">Examples <a class=\"heading-anchor-permalink\" href=\"#examples\">#</a></h2>\n<p>To see it in action, follow this link:<br>\n<a href=\"https://codepen.io/pichou/pen/dLaaBW\">Pearl viewer</a></p>\n",
      "id": 5
    }
  ]
}